---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 9 @ 11:59PM
author: "Zijie Chen 305975150"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
execute:
  eval: True    
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(data.table)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display memory information of your computer
```{r}
memuse::Sys.meminfo()
```

In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:

```{bash}
ls -l ~/mimic/hosp/
```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Q1.1 Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

```{r}
admissions <- read_csv("~/mimic/hosp/admissions.csv.gz")
admissions <- read.csv("~/mimic/hosp/admissions.csv.gz")
admissions <- fread("~/mimic/hosp/admissions.csv.gz")
```


Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant dataframe or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage.) 

***Answer***
'fread' is the fastest, and 'read.csv' is the slowest. The default parsed data types are different. 'read_csv' and 'fread' use tibble and data.table, respectively, while 'read.csv' uses 'data.frame'. The memory usage of 'fread' is the smallest, and 'read.csv' is the largest. 

```{r}
system.time(admissions <- read_csv("~/mimic/hosp/admissions.csv.gz"))
pryr::object_size(admissions)
```

```{r}
system.time(admissions <- read.csv("~/mimic/hosp/admissions.csv.gz"))
pryr::object_size(admissions)
```

```{r}
system.time(admissions <- fread("~/mimic/hosp/admissions.csv.gz"))
pryr::object_size(admissions)
```


### Q1.2 User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.)

```{r}
admissions <- read_csv("~/mimic/hosp/admissions.csv.gz", col_types = cols())
system.time(admissions <- read_csv("~/mimic/hosp/admissions.csv.gz", col_types = cols()))
pryr::object_size(admissions)
```
***Answer***
The run time is a little quicker than the default setting. The memory usage is the same as the default setting.

## Q2. Ingest big data files

<p align="center">
  <img src="./bigfile.png" width="50%">
</p>

Let us focus on a bigger file, `labevents.csv.gz`, which is about 125x bigger than `admissions.csv.gz`.
```{bash}
ls -l ~/mimic/hosp/labevents.csv.gz
```
Display the first 10 lines of this file.
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head -10
```

### Q2.1 Ingest `labevents.csv.gz` by `read_csv`

<p align="center">
  <img src="./readr_logo.png" width="20%">
</p>

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 5 minutes on your computer, then abort the program and report your findings. 

```{r}
#labevents <- read_csv("~/mimic/hosp/labevents.csv.gz")
```

***Answer***
The process takes more than 5 minutes, and the memory usage is increasing and I may need a bigger memory to run this process. 

### Q2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`.  Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)

```{r}
#labevents <- read_csv("~/mimic/hosp/labevents.csv.gz", col_select = c("subject_id", "itemid", "charttime", "valuenum"))
```
***Answer***
The process takes shorter compare to the previous process, but it still takes more than 5 minutes. The memory usage is increasing.

### Q2.3 Ingest subset of `labevents.csv.gz`

<p align="center">
  <img src="./linux_logo.png" width="20%">
</p>

Our first strategy to handle this big data file is to make a subset of the `labevents` data.  Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `gzip` to compress the output. To save render time, put `#| eval: false` at the beginning of this code chunk.)

```{bash}
#| eval: false
zcat < ~/mimic/hosp/labevents.csv.gz  | awk -F ',' 'BEGIN {OFS=","} NR==1 || ($5==50912 || $5==50971 || $5==50983 || $5==50902 || $5==50882 || $5==51221 || $5==51301 || $5==50931) {print $2, $5, $7, $10}' | gzip > labevents_filtered.csv.gz
```

Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?

***Answer***
The first 10 lines of the new file `labevents_filtered.csv.gz` are displayed below. The number of lines in this new file is 24855909. The process takes 10 second to ingest `labevents_filtered.csv.gz`.

```{bash}
zcat < labevents_filtered.csv.gz | head -10
zcat < labevents_filtered.csv.gz | wc -l
```

```{r}
system.time(labevents <- read_csv("labevents_filtered.csv.gz"))
```
```{bash}
#This is the code I used for deleting the file
rm labevents_filtered.csv.gz
```

### Q2.4 Ingest `labevents.csv` by Apache Arrow

<p align="center">
  <img src="./arrow_logo.png" width="30%">
</p>

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory. To save render time, put `#| eval: false` at the beginning of this code chunk.

```{bash}
#| eval: false
gzip -d -c ~/mimic/hosp/labevents.csv.gz > labevents.csv
```

Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

***Answer***
It takes 33 seconds to ingest `labevents.csv` and filter the selected columns. The number of rows in the result tibble is 24855909, and the first 10 rows of the result tibble match those in Q2.3.

```{r}
labevents <- arrow::open_dataset("labevents.csv", format = "csv") %>%
  dplyr::select(subject_id, itemid, charttime, valuenum) %>%
  dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) %>%
  collect()

system.time(labevents <- arrow::open_dataset("labevents.csv", format = "csv") %>%
  dplyr::select(subject_id, itemid, charttime, valuenum) %>%
  dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) %>%
  collect())

nrow(labevents)
head(labevents, 10)
```



Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator. 

***Answer***
Apache Arrow is a cross-language development platform for in-memory data. It specifies a standardized language-independent columnar memory format for flat and hierarchical data, organized for efficient analytic operations on modern hardware. It also provides high-performance data interchange between systems and applications.

### Q2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

<p align="center">
  <img src="./parquet_logo.png" width="30%">
</p>

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

***Answer***
The Parquet file `labevents.parquet` is 1.9 GB in size. It takes 10 seconds to ingest `labevents.parquet` and filter the selected columns. The number of rows in the result tibble is 24855909, and the first 10 rows of the result tibble match those in Q2.3.

```{r}
labevents <- arrow::open_dataset("labevents.csv", format = "csv")
arrow::write_dataset(labevents, "labevents.parquet", format = "parquet")
labevents <- arrow::open_dataset("labevents.parquet", format = "parquet") %>%
  dplyr::select(subject_id, itemid, charttime, valuenum) %>%
  dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) %>%
  collect()

system.time(labevents <- arrow::open_dataset("labevents.parquet", format = "parquet") %>% 
  dplyr::select(subject_id, itemid, charttime, valuenum) %>%
  dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) %>%
  collect())

nrow(labevents)
head(labevents, 10)
```

Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.

***Answer***
Parquet is a columnar storage file format that is optimized for reading and writing large datasets. It is designed to be efficient and performance for big data processing. It is especially useful for analytics and business intelligence applications where large amounts of data are processed and analyzed.


### Q2.6 DuckDB

<p align="center">
  <img src="./duckdb_logo.png" width="20%">
</p>

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

***Answer***
It takes 10 seconds to ingest `labevents.parquet`, convert it to a DuckDB table, and filter the selected columns. The number of rows in the result tibble is 24855909, and the first 10 rows of the result tibble match those in Q2.3.

```{r}
labevents_duckdb <- arrow::open_dataset("labevents.parquet", format = "parquet") %>%
  arrow::to_duckdb() %>%
  dplyr::select(subject_id, itemid, charttime, valuenum) %>%
  dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) %>%
  collect()

system.time(labevents_duckdb <- arrow::open_dataset("labevents.parquet", format = "parquet") %>% 
  arrow::to_duckdb() %>%
  dplyr::select(subject_id, itemid, charttime, valuenum) %>%
  dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) %>%
  collect())

nrow(labevents_duckdb)
head(labevents_duckdb, 10)
```


Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.

***Answer***
DuckDB is an database management system designed for analytical workloads. It is designed to be fast and efficient for analytically queries and is especially useful for big data processing and analytics. It is designed to be easy to use and integrate with other systems and applications.


```{bash}
#This is the code I used for deleting the file
rm labevents.csv
```

## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head -10
```
[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head -10
```
In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2. 

```{bash}
#| eval: false
zcat < ~/mimic/icu/chartevents.csv.gz | awk -F ',' 'BEGIN {OFS=","} NR==1 || ($7==220045 || $7==220181 || $7==220179 || $7==223761 || $7==220210)' | gzip > chartevents_subset.csv.gz
```

Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.
```{bash}
zcat < chartevents_subset.csv.gz | head -10
zcat < chartevents_subset.csv.gz | wc -l
```

```{bash}
#This is the code I used for deleting the file
rm chartevents_subset.csv.gz
```